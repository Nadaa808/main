// Updated Prisma schema integrating new KYC/KYB management models with existing RWA Tokenization platform schema
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// -----------------------------
// Enums
// -----------------------------

enum UserRole {
  SUPER_ADMIN
  ADMIN
  COMPLIANCE_OFFICER
}

enum UserType {
  ISSUER
  INVESTOR
}

// NEW: Client entity type classification
enum ClientType {
  INDIVIDUAL  // Individual persons (KYC)
  COMMUNITY   // DAOs, communities, collective entities (KYB)
}

enum VerificationStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
  EXPIRED
}

enum VCStatus {
  ACTIVE
  REVOKED
  EXPIRED
  SUSPENDED
}

enum WalletType {
  METAMASK
  WALLET_CONNECT
  HARDWARE
  CUSTODIAL
  MULTI_SIG
}

enum AssetType {
  REAL_ESTATE
  COMMODITIES
  ART_COLLECTIBLES
  PRIVATE_EQUITY
  BONDS
  INFRASTRUCTURE
  INTELLECTUAL_PROPERTY
  OTHER
}

enum AssetStatus {
  DRAFT
  UNDER_REVIEW
  APPROVED
  TOKENIZED
  TRADING
  SUSPENDED
  DELISTED
}

// New KYC/KYB management enums

enum KYCStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
  EXPIRED
  RESUBMISSION_REQUIRED
}

enum KYCType {
  KYC  // Know Your Customer (Individual)
  KYB  // Know Your Business (Entity)
}

enum VerificationType {
  AUTO   // Verified automatically by Sumsub
  MANUAL // Manually verified by admin
}

// -----------------------------
// Core User & Identity Models
// -----------------------------

model User {
  id                Int               @id @default(autoincrement())
  email             String            @unique
  password          String
  firstName         String?
  lastName          String?
  countryOfResidency String?
  
  // Role-based classification (3-dimensional)
  role              UserRole?         // Internal staff roles (nullable for clients)
  userType          UserType?         // Business function (nullable for staff)
  clientType        ClientType?       // Entity type (nullable for staff)
  
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // 2FA (TOTP) Integration
  twoFactorEnabled  Boolean           @default(false)
  twoFactorSecret   String?           // Base32 encoded secret for TOTP
  twoFactorBackupCodes String?        // JSON array of backup codes
  twoFactorLastUsed DateTime?         // Prevent replay attacks
  
  // Optional identity fields (useful for quick look‑ups without joining Wallet table)
  walletAddress     String?           @unique
  didAddress        String?           @unique

  // Legacy KYC/KYB relations (optional if you keep these profiles)
  kycProfile        KYCProfile?
  kybProfile        KYBProfile?

  // NEW: KYC submission workflow relations
  kycSubmissions    KYCSubmission[]

  // Wallet Relations
  wallets           Wallet[]

  // DID Relations
  didProfiles       DIDProfile[]

  // VC Relations
  verifiableCredentials VerifiableCredential[]

  // SBT Relations
  soulboundTokens   SoulboundToken[]

  // Asset Relations (for issuers)
  issuedAssets      Asset[]           @relation("AssetIssuer")

  // Investment Relations (for investors)
  investments       Investment[]

  // Admin Preferences Relation
  adminPreferences  AdminPreferences? @relation("AdminPreferences")

  // Activity Log Relation
  activityLogs      ActivityLog[]

  // Enhanced indexing for multi-dimensional queries
  @@index([userType, clientType, isActive])
  @@index([role, isActive])
  @@index([email, isActive])
}

// -----------------------------
// Legacy KYC/KYB Profile Models (keep if still required)
// -----------------------------

model KYCProfile {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Personal Information
  dateOfBirth       DateTime?
  nationality       String?
  phoneNumber       String?
  address           String?
  city              String?
  country           String?
  postalCode        String?

  // Document Verification
  idDocumentType    String?
  idDocumentNumber  String?
  idDocumentExpiry  DateTime?

  // Verification Status
  verificationStatus VerificationStatus @default(PENDING)
  verifiedAt        DateTime?
  verifiedBy        String?

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model KYBProfile {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Business Information
  companyName       String
  businessType      String?
  registrationNumber String?
  taxId             String?
  incorporationDate DateTime?

  // Business Address
  businessAddress   String?
  businessCity      String?
  businessCountry   String?
  businessPostalCode String?

  // Verification Status
  verificationStatus VerificationStatus @default(PENDING)
  verifiedAt        DateTime?
  verifiedBy        String?

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// -----------------------------
// NEW: KYC Submission Workflow Models
// -----------------------------

model KYCSubmission {
  id                Int                @id @default(autoincrement())
  userId            Int
  submissionType    KYCType            @default(KYC)

  // Sumsub Integration
  sumsubApplicantId String?            @unique
  sumsubToken       String?

  // Submission Data
  status            KYCStatus          @default(PENDING)
  isActive          Boolean            @default(true) // Only one active submission per user

  // File Storage
  documentUrls      Json?

  // Verification Details
  verificationType  VerificationType?
  verifiedBy        String?
  verifiedAt        DateTime?
  rejectionReason   String?

  // Blockchain Integration (optional, future‑proof)
  walletAddress     String?
  soulboundTokenTx  String?
  verifiableCredential Json?

  // Timestamps
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  statusHistory     KYCStatusHistory[]

  @@map("kyc_submissions")
}

model KYCStatusHistory {
  id               Int               @id @default(autoincrement())
  submissionId     Int

  // Status change details
  previousStatus   KYCStatus?
  newStatus        KYCStatus
  reason           String?

  // Who made the change
  verificationType VerificationType
  verifiedBy       String?

  // Timestamps
  createdAt        DateTime          @default(now())

  // Relations
  submission       KYCSubmission     @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("kyc_status_history")
}

// -----------------------------
// Decentralized Identity (DID) & VC Models
// -----------------------------

model DIDProfile {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  didMethod   String
  didId       String   @unique
  publicKey   String
  privateKey  String?
  metadata    Json?

  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VerifiableCredential {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  credentialType String
  issuer      String
  subject     String
  issuanceDate DateTime
  expirationDate DateTime?

  credential  Json
  proof       Json?

  status      VCStatus @default(ACTIVE)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// -----------------------------
// Soulbound Tokens (SBT)
// -----------------------------

model SoulboundToken {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  tokenType   String
  tokenId     String   @unique
  contractAddress String
  blockchain  String   @default("Ethereum")

  metadata    Json
  attributes  Json?

  mintedAt    DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// -----------------------------
// Wallet Management
// -----------------------------

model Wallet {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  walletType  WalletType
  address     String   @unique
  publicKey   String?
  encryptedPrivateKey String?

  blockchain  String   @default("Ethereum")
  isActive    Boolean  @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// -----------------------------
// Asset Management (RWA Tokenization)
// -----------------------------

model Asset {
  id            Int      @id @default(autoincrement())
  issuerId      Int
  issuer        User     @relation("AssetIssuer", fields: [issuerId], references: [id])

  // Asset Details
  name          String
  symbol        String   @unique
  description   String?
  assetType     AssetType
  totalSupply   Decimal

  // Tokenization Details
  contractAddress String?
  blockchain    String   @default("Ethereum")
  tokenStandard String   @default("ERC-20")

  // Valuation
  valuationAmount Decimal?
  valuationCurrency String @default("USD")
  lastValuationDate DateTime?

  // Status
  status        AssetStatus @default(DRAFT)

  // Metadata
  metadata      Json?
  documents     Json?

  // Relations
  investments   Investment[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// -----------------------------
// Investment Tracking
// -----------------------------

model Investment {
  id            Int      @id @default(autoincrement())
  investorId    Int
  investor      User     @relation(fields: [investorId], references: [id])
  assetId       Int
  asset         Asset    @relation(fields: [assetId], references: [id])

  // Investment Details
  amount        Decimal
  currency      String   @default("USD")
  tokenAmount   Decimal
  pricePerToken Decimal

  // Transaction Details
  transactionHash String?
  blockNumber   Int?

  // Status
  status        InvestmentStatus @default(PENDING)

  investedAt    DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum InvestmentStatus {
  PENDING
  CONFIRMED
  FAILED
  REFUNDED
}

model ActivityLog {
  id          Int      @id @default(autoincrement())
  type        String   // LOGIN_SUCCESS, FAILED_LOGIN_ATTEMPT, etc.
  description String
  userId      Int?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  metadata    String?  // JSON string for additional data
  createdAt   DateTime @default(now())

  @@index([userId, createdAt])
  @@index([type, createdAt])
}

// Admin Preferences Model for Profile Settings
model AdminPreferences {
  id                      Int      @id @default(autoincrement())
  adminId                 Int      @unique
  admin                   User     @relation("AdminPreferences", fields: [adminId], references: [id], onDelete: Cascade)
  
  // UI/UX Preferences
  dashboardTheme          String   @default("dark")        // light, dark, auto
  language                String   @default("en")          // en, es, fr, de, zh, ja
  timezone                String   @default("UTC")
  
  // Notification Settings (JSON)
  notificationSettings    String   @default("{\"emailAlerts\":true,\"securityAlerts\":true,\"systemUpdates\":true,\"weeklyReports\":true}")
  
  // Dashboard Layout (JSON)
  dashboardLayout         String   @default("{\"compactMode\":false,\"showAdvancedMetrics\":true,\"defaultView\":\"overview\"}")
  
  // Default Filters (JSON)
  defaultFilters          String   @default("{\"userStatus\":\"all\",\"verificationStatus\":\"all\",\"dateRange\":\"30d\"}")
  
  // System Preferences
  autoRefreshInterval     Int      @default(300)           // seconds
  
  // Security Alerts (JSON)
  securityAlerts          String   @default("{\"failedLogins\":true,\"suspiciousActivity\":true,\"newAdminActions\":true}")
  
  // Data Retention (JSON)
  dataRetentionPreferences String  @default("{\"activityLogRetention\":\"1y\",\"exportFrequency\":\"monthly\"}")
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  @@index([adminId])
}
